package com.shoppingcart.servlet;

import java.io.IOException;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.Date;

import com.shoppingcart.connection.DBconnection;
import com.shoppingcart.dao.CartDAO;
import com.shoppingcart.dao.ProductDAO;
import com.shoppingcart.dao.Userdao;
import com.shoppingcart.usermodel.CartItem;
import com.shoppingcart.usermodel.Order;
import com.shoppingcart.usermodel.Product;
import com.shoppingcart.usermodel.UserModel;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

@WebServlet("/ConfirmOrderServlet")
public class ConfirmOrderServlet extends HttpServlet {
    private static final long serialVersionUID = 1L;

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        String email = (String) request.getSession().getAttribute("email");
        String cartIdStr = request.getParameter("cartId");

        if (cartIdStr == null || email == null) {
            response.sendRedirect("error.jsp");
            return;
        }

        int cartId = Integer.parseInt(cartIdStr);
        CartDAO cartDAO = new CartDAO();
        ProductDAO productDAO = new ProductDAO();

        try {
            // Fetch the cart item using the cartId
            CartItem cartItem = cartDAO.getCartItemById(cartId);
            response.sendRedirect("orderConfirmation.jsp");

            if (cartItem != null) {
                // Fetch product details to get the seller's email
                Product product = productDAO.getProductById(cartItem.getProductId());
                cartDAO.removeFromCart(cartId);

                if (product != null) {
                    // Create an Order object
                    Order order = createOrder(cartItem, product, email);

                    // Save the order for the buyer
                    saveOrder(order);

                    // Reduce the stock quantity in the product database and handle low stock situations
                    try {
                        productDAO.reduceStockQuantity(cartItem.getProductId(), cartItem.getQuantity());
                    } catch (SQLException e) {
                        request.setAttribute("error", "Error updating stock: " + e.getMessage());
                        request.getRequestDispatcher("error.jsp").forward(request, response);
                        return;
                    }

                    // Remove the item from the cart
         

                    // Redirect to a success page after the order is confirmed
                    
                } else {
                    // Handle case where the product is not found
                    response.sendRedirect("error.jsp");
                }
            } else {
                // Handle case where cartItem is not found
                response.sendRedirect("error.jsp");
            }
        } catch (SQLException | ClassNotFoundException e) {
            e.printStackTrace();
            response.sendRedirect("error.jsp");
        }
    }

    private Order createOrder(CartItem cartItem, Product product, String email) throws SQLException {
        // Retrieve user details
        UserModel user;
        try (Connection connection = DBconnection.getConnection()) {
            Userdao userDao = new Userdao(connection);
            user = userDao.getUserByEmail(email); // Fetch user by email

            if (user == null) {
                throw new SQLException("User not found with email: " + email);
            }
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
            throw new SQLException("Failed to load user data", e);
        }

        // Create and return an Order object
        return new Order(
                0, // orderId will be auto-generated by the database
                cartItem.getCartId(),
                user.getFirstName() + " " + user.getLastName(),
                user.getAddress(),
                user.getCity(),
                user.getState(),
                user.getZipCode(),
                user.getPhoneNumber(),
                cartItem.getPaymentMethod(),
                new Timestamp(new Date().getTime()), // Current date/time
                email,
                cartItem.getProductId(),
                cartItem.getProductName(),
                cartItem.getQuantity(),
                cartItem.getPrice(),
                generateUserOrderNumber(email),
                product.getSellerEmail(),
                "Order Placed",
                null // Payment status can be set later if needed
        );
    }

    private void saveOrder(Order order) throws SQLException {
        String sql = "INSERT INTO revshop.orders (cart_id, full_name, address, city, state, zip_code, phone, payment_method, order_date, email, product_id, product_name, quantity, price, user_order_number, seller_email, order_status) "
                + "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

        try (Connection connection = DBconnection.getConnection();
             PreparedStatement statement = connection.prepareStatement(sql)) {

            // Set all parameters using the Order object
            statement.setInt(1, order.getCartId());
            statement.setString(2, order.getFullName());
            statement.setString(3, order.getAddress());
            statement.setString(4, order.getCity());
            statement.setString(5, order.getState());
            statement.setString(6, order.getZipCode());
            statement.setString(7, order.getPhone());
            statement.setString(8, order.getPaymentMethod());
            statement.setTimestamp(9, order.getOrderDate()); // Assuming orderDate is a Timestamp
            statement.setString(10, order.getEmail());
            statement.setInt(11, order.getProductId());
            statement.setString(12, order.getProductName());
            statement.setInt(13, order.getQuantity());
            statement.setBigDecimal(14, order.getPrice());
            statement.setString(15, order.getUserOrderNumber());
            statement.setString(16, order.getSellerEmail());
            statement.setString(17, order.getOrderStatus());

            statement.executeUpdate();
        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
            throw new SQLException("Failed to save order for buyer", e);
        }
    }

    // Method to generate a unique order number
    private String generateUserOrderNumber(String email) {
        return email + "-" + System.currentTimeMillis();
    }
}
